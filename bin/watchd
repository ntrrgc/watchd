#!/usr/bin/python3
from twisted.internet import reactor, protocol, endpoints
from twisted.protocols import basic
from twisted.internet.endpoints import UNIXClientEndpoint, connectProtocol
import signal
import os
import sys

def nohup():
    signal.signal(signal.SIGHUP, signal.SIG_IGN)

class PubProtocol(basic.LineReceiver):
    def __init__(self, factory):
        self.factory = factory
        self.delimiter = b'\n'

    def connectionMade(self):
        self.factory.clients.add(self)

    def connectionLost(self, reason):
        self.factory.clients.remove(self)

    def lineReceived(self, line):
        for c in self.factory.clients:
            c.transport.write(b'x')

class PubFactory(protocol.Factory):
    def __init__(self):
        self.clients = set()

    def buildProtocol(self, addr):
        return PubProtocol(self)

def on_forked_server_started(pipe_write):
    # Don't get killed by your parent
    nohup()
    # Don't get killed by ^C
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    # Notify parent
    os.write(pipe_write, b'x')
    os.close(pipe_write)
    # Close files
    sys.stdin.close()
    sys.stdout.close()
    sys.stderr.close()

def forked_server(started_callback):
    endpoints.serverFromString(reactor, "unix:/tmp/watchd.sock").listen(PubFactory())
    reactor.callWhenRunning(started_callback)
    reactor.run()

def foreground_server():
    endpoints.serverFromString(reactor, "unix:/tmp/watchd.sock").listen(PubFactory())
    reactor.run()

def fork_server():
    pipe_read, pipe_write = os.pipe()

    pid = os.fork()
    if pid == 0: # Child process
        os.close(pipe_read)
        forked_server(lambda: on_forked_server_started(pipe_write))
    else:
        os.close(pipe_write)
        started_signal = os.read(pipe_read, 1)
        if started_signal != b'':
            sys.exit(0) # Done!
        else:
            sys.stderr.write('Pipe error. Server may not be running.\n')
            sys.exit(1)

if __name__ == "__main__":
    if "--no-fork" in sys.argv:
        foreground_server()
    else:
        fork_server()
